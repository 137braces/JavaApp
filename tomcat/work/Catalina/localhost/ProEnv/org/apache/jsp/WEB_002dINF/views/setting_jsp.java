/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.13
 * Generated at: 2023-11-17 11:13:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;

public final class setting_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/vue@2.*/dist/vue.js\"></script>\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath() );
      out.write("/css/setting.css\">\n");
      out.write("<link href=\"https://use.fontawesome.com/releases/v6.2.0/css/all.css\" rel=\"stylesheet\">\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html\" charset=\"UTF-8\">\n");
      out.write("        <title>Java - paiza</title>\n");
      out.write("    </head>\n");
      out.write("\n");
      out.write("\n");
      out.write("    <body>\n");
      out.write("        ");
String error_message = (String)request.getAttribute("error_message");
      out.write("\n");
      out.write("        \n");
      out.write("        <header id=\"header\">\n");
      out.write("            <h3 class=\"logo\"><a href=\"#\">Java Portfolio</a></h3>\n");
      out.write("            <nav>\n");
      out.write("              <ul class=\"nav__list\">\n");
      out.write("                <li class=\"nav__item\"><a href=\"user\">プロフィール</a></li>\n");
      out.write("                <li class=\"nav__item\"><a href=\"search\">さがす</a></li>\n");
      out.write("                <li class=\"nav__item\"><a href=\"setting\">各種設定</a></li>\n");
      out.write("                <li class=\"nav__item\"><a href=\"logout\">ログアウト</a></li>\n");
      out.write("              </ul>\n");
      out.write("            </nav>\n");
      out.write("        </header>\n");
      out.write("\n");
      out.write("      <h1 style=\"margin-top:120px;\">各種設定</h1>\n");
      out.write("      \n");
      out.write("        <a href=\"\">\n");
      out.write("            <i class=\"fa-solid fa-heart\" style=\"color: #df5da2;\"><span style=\"color:black\"> いいね！履歴</span></i>\n");
      out.write("        </a>\n");
      out.write("\n");
      out.write("        <div id=\"alter_password\" style=\"margin-top:20px;\"> \n");
      out.write("            <i @click=\"isShow = !isShow\" class=\"fa-solid fa-shield-halved\" style=\"color: #2464e5;\"><span style=\"color:black\"> パスワード変更</span></i>\n");
      out.write("            <div v-show=\"isShow\">\n");
      out.write("                <form method=\"post\" action=\"alter_password\">\n");
      out.write("                    <p>現在のパスワード</p>\n");
      out.write("                    <input type=\"password\" name=\"password\" id=\"pass\" placeholder=\"\"/>\n");
      out.write("\n");
      out.write("                    <p>新しいパスワード(半角英数・大文字・小文字・記号・8〜100文字)</p>\n");
      out.write("                    <input type=\"password\" name=\"alter_password1\" id=\"pass\" placeholder=\"\"/>\n");
      out.write("\n");
      out.write("                    <p>新しいパスワードの再入力</p>\n");
      out.write("                    <input type=\"password\" name=\"alter_password2\" id=\"pass\" placeholder=\"確認のため、もう一度入力してください。\"/>\n");
      out.write("\n");
      out.write("                    <button type=\"submit\">パスワード変更</button>\n");
      out.write("                </form>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("        ");
 if(error_message != null){ 
      out.write("\n");
      out.write("            ");
      out.print(error_message );
      out.write("\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("        \n");
      out.write("      \n");
      out.write("    </body>\n");
      out.write("</html>\n");
      out.write("<script>\n");
      out.write("    new Vue({\n");
      out.write("        el: '#alter_password',\n");
      out.write("        data() {\n");
      out.write("            return {\n");
      out.write("                isShow: false,\n");
      out.write("            }\n");
      out.write("        },\n");
      out.write("    })\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<style>\n");
      out.write("i{\n");
      out.write("  cursor:pointer\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("  \n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
