/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.13
 * Generated at: 2023-11-09 13:34:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;

public final class search_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!-- ServletからArryaListでデータ渡し -->\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath() );
      out.write("/css/search.css\">\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/vue@2.*/dist/vue.js\"></script>\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html\" charset=\"UTF-8\">\n");
      out.write("        <title>Java - paiza</title>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("\n");
      out.write("        <!-- リクエストスコープからログインユーザーのIDを取得する -->\n");
      out.write("        ");
String name = (String)session.getAttribute("name");
      out.write("\n");
      out.write("\n");
      out.write("        <!-- エラーメッセージを取得 -->\n");
      out.write("        ");
String message = (String)request.getAttribute("message");
      out.write("\n");
      out.write("       \n");
      out.write("\n");
      out.write("        <header id=\"header\">\n");
      out.write("            <h3 class=\"logo\"><a href=\"#\">Java Portfolio</a></h3>\n");
      out.write("            <nav>\n");
      out.write("              <ul class=\"nav__list\">\n");
      out.write("                <li class=\"nav__item\"><a href=\"user\">");
      out.print( name );
      out.write("</a></li>\n");
      out.write("              \n");
      out.write("                <li class=\"nav__item\"><a href=\"\">さがす</a></li>\n");
      out.write("                \n");
      out.write("               \n");
      out.write("                <li class=\"nav__item\"><a href=\"#\">ログアウト</a></li>\n");
      out.write("              </ul>\n");
      out.write("            </nav>\n");
      out.write("          </header>\n");
      out.write("\n");
      out.write("          <div id=\"app\">\n");
      out.write("            <button @click=\"isShow = !isShow\">表示切り替え</button>\n");
      out.write("            <div v-show=\"isShow\">\n");
      out.write("              <form method=\"get\" action=\"search_result\">\n");
      out.write("              <label class=\"selectbox-002\">\n");
      out.write("                <select name=\"age1\">\n");
      out.write("                    <option value=\"0\">こだわらない</option>\n");
      out.write("                    <option value=\"18\">18</option>\n");
      out.write("                    <option value=\"19\">19</option>\n");
      out.write("                    <option value=\"20\">20</option>\n");
      out.write("                    <option value=\"21\">21</option>\n");
      out.write("                    <option value=\"22\">22</option>\n");
      out.write("                    <option value=\"23\">23</option>\n");
      out.write("                    <option value=\"24\">24</option>\n");
      out.write("                    <option value=\"25\">25</option>\n");
      out.write("                    <option value=\"26\">26</option>\n");
      out.write("                    <option value=\"27\">27</option>\n");
      out.write("                    <option value=\"28\">28</option>\n");
      out.write("                    <option value=\"29\">29</option>\n");
      out.write("                    <option value=\"30\">30</option>\n");
      out.write("                </select>\n");
      out.write("            </label>\n");
      out.write("        \n");
      out.write("            <label class=\"selectbox-002\">\n");
      out.write("              <select name=\"age2\">\n");
      out.write("                <option value=\"0\">こだわらない</option>\n");
      out.write("                <option value=\"18\">18</option>\n");
      out.write("                <option value=\"19\">19</option>\n");
      out.write("                <option value=\"20\">20</option>\n");
      out.write("                <option value=\"21\">21</option>\n");
      out.write("                <option value=\"22\">22</option>\n");
      out.write("                <option value=\"23\">23</option>\n");
      out.write("                <option value=\"24\">24</option>\n");
      out.write("                <option value=\"25\">25</option>\n");
      out.write("                <option value=\"26\">26</option>\n");
      out.write("                <option value=\"27\">27</option>\n");
      out.write("                <option value=\"28\">28</option>\n");
      out.write("                <option value=\"29\">29</option>\n");
      out.write("                <option value=\"30\">30</option>\n");
      out.write("              </select>\n");
      out.write("          </label>\n");
      out.write("          <button type=\"submit\">この条件で検索</button>\n");
      out.write("        </form>\n");
      out.write("            </div>\n");
      out.write("          </div>\n");
      out.write("    \n");
      out.write("        \n");
      out.write("          <div class=\"arraylist\">\n");
      out.write("           \n");
      out.write("            <div>\n");
      out.write("              ");
 ArrayList<HashMap<String,String>> rows = (ArrayList<HashMap<String,String>>)request.getAttribute("rows");
      out.write("\n");
      out.write("\n");
      out.write("                ");
for (HashMap<String,String> columns : rows) { 
      out.write("\n");
      out.write("                \n");
      out.write("                      <img style=\"border-radius:50%; width: 150px; height: 150px; border: solid 1px #6b6767;\" \n");
      out.write("                      src= \"");
      out.print(request.getContextPath() );
      out.print( columns.get("image") );
      out.write("\">\n");
      out.write("\n");
      out.write("                      <p><a href=\"other_user?id=");
      out.print( columns.get("id") );
      out.write('"');
      out.write('>');
      out.print( columns.get("name") );
      out.write("</a></p>\n");
      out.write("                      <p>");
      out.print( columns.get("age") );
      out.write("歳</p>\n");
      out.write("                \n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("            </div>            \n");
      out.write("          </div>          \n");
      out.write("    </body>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("<style>\n");
      out.write(".arraylist {\n");
      out.write("  padding-top:20px;\n");
      out.write("  display: flex;\n");
      out.write("  flex-direction: row;\n");
      out.write("\n");
      out.write("}\n");
      out.write("\n");
      out.write("#app {\n");
      out.write("  margin-top:150px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".selectbox-002 {\n");
      out.write("    position: relative;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".selectbox-002::before,\n");
      out.write(".selectbox-002::after {\n");
      out.write("    position: absolute;\n");
      out.write("    content: '';\n");
      out.write("    pointer-events: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".selectbox-002::before {\n");
      out.write("    right: 0;\n");
      out.write("    display: inline-block;\n");
      out.write("    width: 2.8em;\n");
      out.write("    height: 2.8em;\n");
      out.write("    border-radius: 0 3px 3px 0;\n");
      out.write("    background-color: #2589d0;\n");
      out.write("    content: '';\n");
      out.write("}\n");
      out.write("\n");
      out.write(".selectbox-002::after {\n");
      out.write("    position: absolute;\n");
      out.write("    top: 50%;\n");
      out.write("    right: 1.4em;\n");
      out.write("    transform: translate(50%, -50%) rotate(45deg);\n");
      out.write("    width: 6px;\n");
      out.write("    height: 6px;\n");
      out.write("    border-bottom: 3px solid #fff;\n");
      out.write("    border-right: 3px solid #fff;\n");
      out.write("    content: '';\n");
      out.write("}\n");
      out.write("\n");
      out.write(".selectbox-002 select {\n");
      out.write("    appearance: none;\n");
      out.write("    -webkit-appearance: none;\n");
      out.write("    -moz-appearance: none;\n");
      out.write("    min-width: 230px;\n");
      out.write("    height: 2.8em;\n");
      out.write("    padding: .4em 3.6em .4em .8em;\n");
      out.write("    border: 2px solid #2589d0;\n");
      out.write("    border-radius: 3px;\n");
      out.write("    color: #333333;\n");
      out.write("    font-size: 1em;\n");
      out.write("    cursor: pointer;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".selectbox-002 select:focus {\n");
      out.write("    outline: 1px solid #2589d0;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("  new Vue({\n");
      out.write("      el: '#app',\n");
      out.write("      data() {\n");
      out.write("          return {\n");
      out.write("              isShow: false,\n");
      out.write("          }\n");
      out.write("      },\n");
      out.write("  })\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
