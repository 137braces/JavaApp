/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.13
 * Generated at: 2023-11-05 07:26:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;

public final class user_005fedit_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<script src=\"https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.3.1.min.js\"></script>\n");
      out.write("<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath() );
      out.write("/css/user_edit.css\">\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html\" charset=\"UTF-8\">\n");
      out.write("        <title>Java - paiza</title>\n");
      out.write("    </head>\n");
      out.write("\n");
      out.write("\n");
      out.write("    <body>\n");
      out.write("\n");
      out.write("      <!-- リクエストスコープからログインユーザーのIDを取得する -->\n");
      out.write("      ");
String name = (String)session.getAttribute("name");
      out.write("\n");
      out.write("      ");
String address = (String)session.getAttribute("address");
      out.write("\n");
      out.write("      ");
String job = (String)session.getAttribute("job");
      out.write("\n");
      out.write("\n");
      out.write("      \n");
      out.write("\n");
      out.write("      <header id=\"header\">\n");
      out.write("        <h3 class=\"logo\"><a href=\"#\">Java Portfolio</a></h3>\n");
      out.write("        <nav>\n");
      out.write("          <ul class=\"nav__list\">\n");
      out.write("            <li class=\"nav__item\"><a href=\"#\">");
      out.print( name );
      out.write("</a></li>\n");
      out.write("            <li class=\"nav__item\"><a href=\"search\">さがす</a></li>\n");
      out.write("            \n");
      out.write("            <li class=\"nav__item\"><a href=\"post\">つぶやき</a></li>\n");
      out.write("            <li class=\"nav__item\"><a href=\"#\">ログアウト</a></li>\n");
      out.write("          </ul>\n");
      out.write("        </nav>\n");
      out.write("      </header>\n");
      out.write("      \n");
      out.write("      <div class=\"user_edit\">\n");
      out.write("        <form>\n");
      out.write("            <input type=\"text\" name=\"name\" size=\"\" value=\"");
      out.print( name );
      out.write("\" id=\"user_name\">\n");
      out.write("            <br>\n");
      out.write("            <br>\n");
      out.write("            <select name=\"address\" id=\"user_address\">\n");
      out.write("                <option value=\"\">未設定</option>\n");
      out.write("                <option value=\"大阪\">大阪</option>\n");
      out.write("                <option value=\"兵庫\">兵庫</option>\n");
      out.write("                <option value=\"京都\">京都</option>\n");
      out.write("                <option value=\"奈良\">奈良</option>\n");
      out.write("                <option value=\"和歌山\">和歌山</option>\n");
      out.write("            </select>\n");
      out.write("        \n");
      out.write("        <br>\n");
      out.write("        <br>\n");
      out.write("        <select name=\"job\" id=\"user_job\">\n");
      out.write("            <option value=\"\">未設定</option>\n");
      out.write("            <option value=\"エンジニア\">エンジニア</option>\n");
      out.write("            <option value=\"薬剤師\">薬剤師</option>\n");
      out.write("            <option value=\"研究職\">美容師</option>\n");
      out.write("            <option value=\"奈良\">医師</option>\n");
      out.write("            <option value=\"和歌山\">デザイナー</option>\n");
      out.write("        </select>\n");
      out.write("    </form>\n");
      out.write("      </div>\n");
      out.write("\n");
      out.write("    </body>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("\n");
      out.write("$('#user_name').on('change', function(){\n");
      out.write("    let user_name = $('#user_name').val();\n");
      out.write("\n");
      out.write("    $.ajax({\n");
      out.write("        type:'POST',\n");
      out.write("        url: 'user_edit',\n");
      out.write("        async : true,\n");
      out.write("        data: {name:user_name}\n");
      out.write("        }).done(function () {\n");
      out.write("          alert(user_name + \"成功しました\");\n");
      out.write("        }).fail(function () {\n");
      out.write("          alert(\"読み込み失敗\");\n");
      out.write("    });\n");
      out.write("\n");
      out.write("}); \n");
      out.write("\n");
      out.write("\n");
      out.write("$('#user_address').on('change', function(){\n");
      out.write("    let user_address = $('#user_address').val();\n");
      out.write("\n");
      out.write("    $.ajax({\n");
      out.write("        type:'POST',\n");
      out.write("        url: 'user_edit',\n");
      out.write("        async : true,\n");
      out.write("        data: {address:user_address}\n");
      out.write("        }).done(function () {\n");
      out.write("          alert(user_address + \"成功しました\");\n");
      out.write("        }).fail(function () {\n");
      out.write("          alert(\"読み込み失敗\");\n");
      out.write("    });\n");
      out.write("\n");
      out.write("}); \n");
      out.write("\n");
      out.write("$('#user_job').on('change', function(){\n");
      out.write("    let user_job = $('#user_job').val();\n");
      out.write("\n");
      out.write("    $.ajax({\n");
      out.write("        type:'POST',\n");
      out.write("        url: 'user_edit',\n");
      out.write("        async : true,\n");
      out.write("        data: {job:user_job}\n");
      out.write("        }).done(function () {\n");
      out.write("          alert(user_job + \"成功しました\");\n");
      out.write("        }).fail(function () {\n");
      out.write("          alert(\"読み込み失敗\");\n");
      out.write("    });\n");
      out.write("\n");
      out.write("});     \n");
      out.write("\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
